// Generated by CoffeeScript 1.10.0
(function() {
  var BigNum, Transform,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BigNum = require('bignum');

  Transform = (function() {
    var TransBigInt, TransBuffer, TransPad;

    Transform.prototype.cleanHex = function(hexStr) {
      return hexStr.split(/\s/).join('');
    };

    TransBigInt = (function() {
      function TransBigInt() {}

      TransBigInt.prototype.toHex = function(bigIntegerObj) {
        var thisHexString;
        thisHexString = bigIntegerObj.toString(16);
        if (thisHexString.length % 2 === 1) {
          thisHexString = "0" + thisHexString;
        }
        return thisHexString;
      };

      TransBigInt.prototype.fromHex = function(hexStr) {
        var buffer;
        buffer = new Buffer(hexStr, 'hex');
        return BigNum.fromBuffer(buffer);
      };

      TransBigInt.prototype.toBuffer = function(bigIntegerObj) {
        return bigIntegerObj.toBuffer();
      };

      return TransBigInt;

    })();

    TransBuffer = (function() {
      function TransBuffer() {}

      TransBuffer.prototype.toHex = function(bufferObj) {
        return bufferObj.toString('hex');
      };

      TransBuffer.prototype.toBigInteger = function(bufferObj) {
        return BigNum.fromBuffer(bufferObj);
      };

      return TransBuffer;

    })();

    TransPad = (function(superClass) {
      extend(TransPad, superClass);

      function TransPad() {
        return TransPad.__super__.constructor.apply(this, arguments);
      }

      TransPad.prototype.to = function(n, length) {
        var padding, result;
        padding = length - n.length;
        result = new Buffer(length);
        result.fill(0, 0, padding);
        n.copy(result, padding);
        return result;
      };

      TransPad.prototype.toN = function(number, params) {
        return this.to(this.toBuffer(number), params.length / 8);
      };

      TransPad.prototype.toH = function(number, params) {
        var hashBits;
        hashBits = null;
        switch (params.hash) {
          case 'sha1':
            hashBits = 160;
            break;
          case 'sha256':
            hashBits = 256;
            break;
          case 'sha512':
            hashBits = 512;
            break;
          default:
            throw Error('Unable to determine hash length!');
        }
        return this.to(this.toBuffer(number), hashBits / 8);
      };

      return TransPad;

    })(TransBigInt);

    function Transform() {
      this.bigInt = new TransBigInt;
      this.buffer = new TransBuffer;
      this.pad = new TransPad;
    }

    return Transform;

  })();

  module.exports = new Transform;

}).call(this);
